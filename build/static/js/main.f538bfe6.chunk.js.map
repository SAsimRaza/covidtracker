{"version":3,"sources":["components/AppBar.js","components/GlobalStats.js","components/AllCountryStats.js","components/Section.js","components/FooterNav.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","AppBarSeacrh","classes","className","AppBar","Toolbar","Typography","variant","noWrap","InputBase","placeholder","input","inputProps","maxWidth","margin","marginTop","paper","textAlign","GlobalStats","inititalScreen","useState","globalData","SetGlobalData","console","log","useEffect","a","fetch","response","json","data","results","source","getData","Grid","container","Object","keys","map","key","ind","item","xs","sm","Paper","evalation","replace","toUpperCase","txt","fontWeight","table","overflowY","thTd","border","boxShadow","header","AllStats","values","countryitems","total_cases","total_active_cases","total_recovered","total_serious_cases","total_deaths","SectionPanel","FootNav","screenConfig","BottomNavigation","value","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f538bfe6.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n//import IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\n//import MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function AppBarSeacrh() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {/* <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton> */}\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Covid19-Tracker by Asim Raza\r\n          </Typography>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Enter Country\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: 1000,\r\n        margin: '0 auto',\r\n        marginTop: 30\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        // color: theme.palette.text.secondary,\r\n        backgroundColor: '#3f51b5',\r\n        color:'white'\r\n    },\r\n}));\r\n\r\nexport default function GlobalStats({inititalScreen}) {\r\n\r\n    const [globalData, SetGlobalData] = useState({})\r\n    console.log(inititalScreen)\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const response = await fetch('https://api.thevirustracker.com/free-api?global=stats');\r\n            let data = await response.json();\r\n            delete data.results[0].source;\r\n            SetGlobalData(data.results[0]);\r\n            console.log(data.results[0]);\r\n        }\r\n        getData();\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n\r\n                {Object.keys(globalData).map((key, ind) => {\r\n                    return (\r\n                        <Grid item xs={12} sm={4} key={ind}>\r\n                            <Paper className={classes.paper} evalation={3}>\r\n                                <h4>{key.replace(/_/g,' ').toUpperCase()}</h4>\r\n                                <h4>{globalData[key]}</h4>\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n\r\n\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: 1000,\r\n        margin: '0 auto',\r\n        marginTop: 50,\r\n    },\r\n    title: {\r\n        textAlign: 'left',    \r\n        backgroundColor:'#3f51b5',\r\n        color:'white'   \r\n    },\r\n    txt:{\r\n        textAlign:'center',\r\n        backgroundColor:'#77a2f6',\r\n        fontWeight:'bold',\r\n    },\r\n    table: {\r\n        height: 480,\r\n        overflowY: 'scroll',\r\n        display: 'block',\r\n    },\r\n    thTd:{\r\n        border:'1px solid black',\r\n        backgroundColor:'#3f51b5',\r\n        color:'white',\r\n        boxShadow:'2px 3px #888888'\r\n    },\r\n    header:{\r\n        // width: '100%',\r\n        // height: '50px',\r\n        // position: '-webkit-sticky',\r\n        // position: 'sticky',\r\n        // top: 0\r\n    }\r\n}));\r\n\r\nexport default function AllStats() {\r\n\r\n    const [globalData, SetGlobalData] = useState([{}])\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const response = await fetch('https://api.thevirustracker.com/free-api?countryTotals=ALL');\r\n            let data = await response.json();\r\n            SetGlobalData(Object.values(Object.values(data.countryitems)[0]));\r\n            console.log(Object.values(Object.values(data.countryitems)[0]))\r\n        }\r\n        getData();\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <table className={classes.table}>\r\n            <thead className={classes.header}>\r\n                <tr className={[classes.title]}>\r\n                    <th className={classes.thTd}>Country Name</th>\r\n                    <th className={classes.thTd}>Total Cases</th>\r\n                    <th className={classes.thTd}>Active Cases</th>\r\n                    <th className={classes.thTd}>Recovered Cases</th>\r\n                    <th className={classes.thTd}>Total Serious Cases</th>\r\n                    <th className={classes.thTd}> Total Deaths</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {globalData.map((key, ind) => {\r\n                    return (\r\n                        <tr key={ind}>\r\n                            <th className={classes.title}>\r\n                                {globalData[ind].title}\r\n                            </th>\r\n                            <td className={classes.txt}>\r\n                                {globalData[ind].total_cases}\r\n                            </td>\r\n                            <td className={classes.txt}>\r\n                                {globalData[ind].total_active_cases}\r\n                            </td>\r\n                            <td className={classes.txt}>\r\n                                {globalData[ind].total_recovered}\r\n                            </td>\r\n                            <td className={classes.txt}>\r\n                                {globalData[ind].total_serious_cases}\r\n                            </td>\r\n                            <td className={classes.txt}>\r\n                                {globalData[ind].total_deaths}\r\n                            </td>\r\n                            \r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n\r\n    </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport GlobalStats from './GlobalStats';\r\nimport AllStats from './AllCountryStats';\r\n\r\nexport default function SectionPanel({inititalScreen}) {\r\n\r\n  if (inititalScreen === 0){\r\n      return <GlobalStats />\r\n  }\r\n  else if(inititalScreen === 1){\r\n      return <AllStats />\r\n  }\r\n  else {\r\n      return <GlobalStats />\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\n// import RestoreIcon from '@material-ui/icons/Restore';\r\n// import FavoriteIcon from '@material-ui/icons/Favorite';\r\n// import LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport ShowChartTwoToneIcon from '@material-ui/icons/ShowChartTwoTone';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    \r\n  }\r\n});\r\n\r\nexport default function FootNav({screenConfig}) {\r\n  const classes = useStyles();\r\n  //const [value, setValue] = React.useState(0);\r\n  console.log(screenConfig[0])\r\n\r\n  return (\r\n    <BottomNavigation\r\n      value={screenConfig[0]}\r\n      onChange={(event, newValue) => {\r\n        screenConfig[1](newValue);\r\n      }}\r\n      showLabels\r\n      className={classes.root}\r\n    >\r\n      <BottomNavigationAction label=\"Global Stats\" icon={<PublicIcon />} />\r\n      <BottomNavigationAction label=\"Stats by Country\" icon={<SortIcon />} />\r\n      <BottomNavigationAction label=\"Graph Charts\" icon={<ShowChartTwoToneIcon />} />\r\n    </BottomNavigation>\r\n  );\r\n}","import React,{useState} from 'react';\nimport './App.css';\nimport AppBarSearch from './components/AppBar'\nimport SectionPanel from './components/Section'\nimport FootNav from './components/FooterNav'\n\nfunction App() {\n\n  const screenConfig = useState()\n  return (\n    <div>\n      <AppBarSearch />\n      <SectionPanel inititalScreen={screenConfig[0]}/>\n      <FootNav screenConfig={screenConfig}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}